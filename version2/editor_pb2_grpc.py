# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import editor_pb2 as editor__pb2


class EditorServiceStub(object):
    """The Editor service definition, including the new FetchSerializedState RPC method.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InsertText = channel.unary_unary(
                '/editor.EditorService/InsertText',
                request_serializer=editor__pb2.InsertRequest.SerializeToString,
                response_deserializer=editor__pb2.EditResponse.FromString,
                )
        self.DeleteText = channel.unary_unary(
                '/editor.EditorService/DeleteText',
                request_serializer=editor__pb2.DeleteRequest.SerializeToString,
                response_deserializer=editor__pb2.EditResponse.FromString,
                )
        self.FetchDocument = channel.unary_unary(
                '/editor.EditorService/FetchDocument',
                request_serializer=editor__pb2.FetchRequest.SerializeToString,
                response_deserializer=editor__pb2.FetchResponse.FromString,
                )
        self.FetchSerializedState = channel.unary_unary(
                '/editor.EditorService/FetchSerializedState',
                request_serializer=editor__pb2.FetchRequest.SerializeToString,
                response_deserializer=editor__pb2.SerializedDocumentState.FromString,
                )


class EditorServiceServicer(object):
    """The Editor service definition, including the new FetchSerializedState RPC method.
    """

    def InsertText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchSerializedState(self, request, context):
        """New RPC method to fetch the serialized state of the document
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EditorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InsertText': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertText,
                    request_deserializer=editor__pb2.InsertRequest.FromString,
                    response_serializer=editor__pb2.EditResponse.SerializeToString,
            ),
            'DeleteText': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteText,
                    request_deserializer=editor__pb2.DeleteRequest.FromString,
                    response_serializer=editor__pb2.EditResponse.SerializeToString,
            ),
            'FetchDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchDocument,
                    request_deserializer=editor__pb2.FetchRequest.FromString,
                    response_serializer=editor__pb2.FetchResponse.SerializeToString,
            ),
            'FetchSerializedState': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchSerializedState,
                    request_deserializer=editor__pb2.FetchRequest.FromString,
                    response_serializer=editor__pb2.SerializedDocumentState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'editor.EditorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EditorService(object):
    """The Editor service definition, including the new FetchSerializedState RPC method.
    """

    @staticmethod
    def InsertText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/editor.EditorService/InsertText',
            editor__pb2.InsertRequest.SerializeToString,
            editor__pb2.EditResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/editor.EditorService/DeleteText',
            editor__pb2.DeleteRequest.SerializeToString,
            editor__pb2.EditResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/editor.EditorService/FetchDocument',
            editor__pb2.FetchRequest.SerializeToString,
            editor__pb2.FetchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchSerializedState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/editor.EditorService/FetchSerializedState',
            editor__pb2.FetchRequest.SerializeToString,
            editor__pb2.SerializedDocumentState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
